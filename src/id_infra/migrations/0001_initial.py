# Generated by Django 2.2.13 on 2022-03-18 15:51

import datetime
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import vdx_id.mixins.vault


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(help_text='Machine-readable address of Host', max_length=255)),
                ('active', models.BooleanField(default=True, help_text='Is this host active in its AccessDomain?')),
                ('writable', models.BooleanField(default=True, help_text='Should provisioning occur on this host? (False for DR)')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('collection_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Latest collected data')),
                ('last_collection_id', models.CharField(blank=True, max_length=100, null=True)),
                ('collection_meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Metadata about collections (historic)')),
            ],
        ),
        migrations.CreateModel(
            name='AgentApiTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_call', models.CharField(max_length=255)),
                ('tasks_complete', models.BooleanField(default=False)),
                ('tasks_successful', models.BooleanField(default=False)),
                ('server_pks', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Agent API Task',
                'verbose_name_plural': 'Agent API Tasks',
            },
        ),
        migrations.CreateModel(
            name='AgentCeleryTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=255, unique=True)),
                ('state', models.PositiveIntegerField(choices=[(0, 'PENDING'), (1, 'STARTED'), (2, 'RETRY'), (3, 'FAILURE'), (4, 'SUCCESS')], default=0)),
                ('exception', models.TextField(default='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Agent Celery Task',
                'verbose_name_plural': 'Agent Celery Tasks',
            },
        ),
        migrations.CreateModel(
            name='HistoricalViAccessDomain',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('passwords_last_rotated', models.DateTimeField(auto_created=True, default=django.utils.timezone.now)),
                ('rotate_password_interval', models.DurationField(default=datetime.timedelta(90))),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(default='')),
                ('properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Access Domain properties (configure behaviour)')),
                ('capabilities', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='A mapping of capability->interface_function')),
                ('last_collection_id', models.CharField(blank=True, max_length=100, null=True)),
                ('collection_meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Metadata about collections (historic)')),
                ('circuit_break_records', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Records of Circuit Breaker (historic)')),
                ('circuit_break_config', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Overrides CB config from BASE_CIRCUIT_BREAK_CONFIG')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Access Domain',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HostScanDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(default='')),
                ('scan_definition', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text="A JSON object: 'ports':[], 'ranges':[{},]")),
                ('scan_results', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('hosts_default_active', models.BooleanField(default=True, help_text="Are new hosts set as 'active' in their AccessDomain?")),
                ('hosts_default_writable', models.BooleanField(default=True, help_text='Are new Hosts set as writable (provisionable)?')),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ViAgent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False)),
                ('agent_name', models.CharField(max_length=40, unique=True)),
                ('description', models.CharField(max_length=40)),
                ('link_date', models.DateTimeField(blank=True, null=True)),
                ('public_key', models.TextField()),
                ('queue_name_override', models.CharField(blank=True, max_length=80, null=True)),
            ],
            options={
                'verbose_name': 'Agent',
                'verbose_name_plural': 'Agents',
            },
        ),
        migrations.CreateModel(
            name='ViAgentInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface_id', models.CharField(max_length=255, unique=True)),
                ('code_fingerprint', models.CharField(max_length=255)),
                ('task_signature', models.CharField(max_length=255, null=True)),
                ('api', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('default_capabilities', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Default mapping of capability->interface_function')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='last_updated')),
                ('agents', models.ManyToManyField(related_name='agent_interface_set', to='id_infra.ViAgent')),
            ],
            options={
                'verbose_name': 'Agent Interface',
                'verbose_name_plural': 'Agent Interfaces',
            },
        ),
        migrations.CreateModel(
            name='ViAccessDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passwords_last_rotated', models.DateTimeField(auto_created=True, default=django.utils.timezone.now)),
                ('rotate_password_interval', models.DurationField(default=datetime.timedelta(90))),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(default='')),
                ('properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Access Domain properties (configure behaviour)')),
                ('capabilities', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='A mapping of capability->interface_function')),
                ('last_collection_id', models.CharField(blank=True, max_length=100, null=True)),
                ('collection_meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Metadata about collections (historic)')),
                ('circuit_break_records', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Records of Circuit Breaker (historic)')),
                ('circuit_break_config', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Overrides CB config from BASE_CIRCUIT_BREAK_CONFIG')),
                ('group_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_access_domains', to='auth.Group')),
                ('interface', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='access_domains', to='id_infra.ViAgentInterface')),
            ],
            options={
                'verbose_name': 'Access Domain',
                'verbose_name_plural': 'Access Domains',
            },
            bases=(models.Model, vdx_id.mixins.vault.VaultMixin),
        ),
    ]
